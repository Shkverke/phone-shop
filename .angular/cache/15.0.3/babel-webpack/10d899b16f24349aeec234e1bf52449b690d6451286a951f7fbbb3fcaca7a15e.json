{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class CartService {\n  constructor() {\n    this.items = [];\n  }\n  addToCart(product) {\n    if (this.items.find(item => item.id === product.id)) {\n      this.items.push(product);\n    } else {\n      alert(`${product.name} is already in the cart!`);\n    }\n  }\n  getItems() {\n    return this.items;\n  }\n  clearCart() {\n    this.items = [];\n    return this.items;\n  }\n  clearProductFromCart(id) {\n    this.items = this.items.filter(item => item.id != id);\n    return this.items;\n  }\n}\nCartService.ɵfac = function CartService_Factory(t) {\n  return new (t || CartService)();\n};\nCartService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CartService,\n  factory: CartService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AAMA,OAAM,MAAOA,WAAW;EAIpBC;IAFA,UAAK,GAAc,EAAE;EAGzB;EAEIC,SAAS,CAACC,OAAgB;IACtB,IAAI,IAAI,CAACC,KAAK,CAACC,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACC,EAAE,KAAKJ,OAAO,CAACI,EAAE,CAAC,EAAE;MACrD,IAAI,CAACH,KAAK,CAACI,IAAI,CAACL,OAAO,CAAC;KAC3B,MAAM;MACCM,KAAK,CAAC,GAAGN,OAAO,CAACO,IAAI,0BAA0B,CAAC;;EAExD;EAEAC,QAAQ;IACJ,OAAO,IAAI,CAACP,KAAK;EACrB;EAEAQ,SAAS;IACL,IAAI,CAACR,KAAK,GAAG,EAAE;IACf,OAAO,IAAI,CAACA,KAAK;EACrB;EAEAS,oBAAoB,CAACN,EAAU;IAC3B,IAAI,CAACH,KAAK,GAAG,IAAI,CAACA,KAAK,CAACU,MAAM,CAACR,IAAI,IAAIA,IAAI,CAACC,EAAE,IAAIA,EAAE,CAAC;IACrD,OAAO,IAAI,CAACH,KAAK;EACrB;;AA3BSJ,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAe,SAAXf,WAAW;EAAAgB,YAFR;AAAM","names":["CartService","constructor","addToCart","product","items","find","item","id","push","alert","name","getItems","clearCart","clearProductFromCart","filter","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Tngz\\Desktop\\docs-shop\\src\\app\\cart.service.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\nimport {Product} from \"./products\";\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class CartService {\n\n    items: Product[] = [];\n\n    constructor() {\n}\n\n    addToCart(product: Product) {\n        if (this.items.find(item => item.id === product.id)) {\n        this.items.push(product);\n    } else {\n            alert(`${product.name} is already in the cart!`);\n        }\n    }\n\n    getItems() {\n        return this.items;\n    }\n\n    clearCart() {\n        this.items = [];\n        return this.items;\n    }\n\n    clearProductFromCart(id: number) {\n        this.items = this.items.filter(item => item.id != id);\n        return this.items;\n    }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}